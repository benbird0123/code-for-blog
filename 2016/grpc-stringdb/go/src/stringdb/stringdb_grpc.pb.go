// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stringdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StringDbClient is the client API for StringDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringDbClient interface {
	// Get the value stored on the server for a given key
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueReply, error)
	// Set the server's value for a given key
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueReply, error)
	// Count the size of the server's value for a given key
	CountValue(ctx context.Context, in *CountValueRequest, opts ...grpc.CallOption) (*CountValueReply, error)
}

type stringDbClient struct {
	cc grpc.ClientConnInterface
}

func NewStringDbClient(cc grpc.ClientConnInterface) StringDbClient {
	return &stringDbClient{cc}
}

func (c *stringDbClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueReply, error) {
	out := new(GetValueReply)
	err := c.cc.Invoke(ctx, "/stringdb.StringDb/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringDbClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueReply, error) {
	out := new(SetValueReply)
	err := c.cc.Invoke(ctx, "/stringdb.StringDb/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringDbClient) CountValue(ctx context.Context, in *CountValueRequest, opts ...grpc.CallOption) (*CountValueReply, error) {
	out := new(CountValueReply)
	err := c.cc.Invoke(ctx, "/stringdb.StringDb/CountValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StringDbServer is the server API for StringDb service.
// All implementations must embed UnimplementedStringDbServer
// for forward compatibility
type StringDbServer interface {
	// Get the value stored on the server for a given key
	GetValue(context.Context, *GetValueRequest) (*GetValueReply, error)
	// Set the server's value for a given key
	SetValue(context.Context, *SetValueRequest) (*SetValueReply, error)
	// Count the size of the server's value for a given key
	CountValue(context.Context, *CountValueRequest) (*CountValueReply, error)
	mustEmbedUnimplementedStringDbServer()
}

// UnimplementedStringDbServer must be embedded to have forward compatible implementations.
type UnimplementedStringDbServer struct {
}

func (UnimplementedStringDbServer) GetValue(context.Context, *GetValueRequest) (*GetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedStringDbServer) SetValue(context.Context, *SetValueRequest) (*SetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedStringDbServer) CountValue(context.Context, *CountValueRequest) (*CountValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountValue not implemented")
}
func (UnimplementedStringDbServer) mustEmbedUnimplementedStringDbServer() {}

// UnsafeStringDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringDbServer will
// result in compilation errors.
type UnsafeStringDbServer interface {
	mustEmbedUnimplementedStringDbServer()
}

func RegisterStringDbServer(s grpc.ServiceRegistrar, srv StringDbServer) {
	s.RegisterService(&StringDb_ServiceDesc, srv)
}

func _StringDb_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringDb_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringDb_CountValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).CountValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/CountValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).CountValue(ctx, req.(*CountValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StringDb_ServiceDesc is the grpc.ServiceDesc for StringDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stringdb.StringDb",
	HandlerType: (*StringDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _StringDb_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _StringDb_SetValue_Handler,
		},
		{
			MethodName: "CountValue",
			Handler:    _StringDb_CountValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stringdb.proto",
}
